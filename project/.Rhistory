View(demand)
ggplot(demand,aes(y=Supermarket))
ggplot(demand,aes(y=Supermarket))+geom_histogram()
test = demand[1]
View(test)
test = demand[1,1]
View(test)
test = demand[1,]
View(test)
ggplot(test,aes(x=Supermarket))+geom_histogram()
ggplot(test,aes(x=count))+geom_histogram()
ggplot(test,aes(x="count"))+geom_histogram()
ggplot(test,aes(stat="count"))+geom_histogram()
ggplot(test,aes(stat="count"x=Supermarket))+geom_histogram()
ggplot(test,aes(stat="count",x=Supermarket))+geom_histogram()
ggplot(test,aes(,x=ends_with("19")))+geom_histogram()
ggplot(test,aes(,x=ends_with("19",test)))+geom_histogram()
ggplot(test,aes(,x=ends_with(test,"19")))+geom_histogram()
ends_with("19")
ends_with("19",test)
ends_with(test,19)
ends_with(test,"19")
#Loading tidyverse library
library(tidyverse)
#Reading in data
generation = read_csv("C:/Users/jloo1/Dropbox/2nd Year/2nd Sem/255/Assignment 3/generation.csv", col_names=TRUE)
plants = read_csv("C:/Users/jloo1/Dropbox/2nd Year/2nd Sem/255/Assignment 3/plants.csv")
#Adding relevant attributes to generation tibble
generation$Fuel=as.factor(plants$Fuel[match(generation$Node,plants$Node)])
generation$Region=as.factor(plants$Region[match(generation$Node,plants$Node)])
generation$Renewable=as.factor(plants$Type[match(generation$Node,plants$Node)])
#Gathering data set to have single generation output for all TP
gen_gather = gather(generation,key=TP,value=MWh,starts_with("TP"))
View(gen_gather)
View(generation)
View(gen_gather)
test.gather = gather(test,key=date,value=demand,ends_with("19"))
View(test.gather)
ggplot(test,aes(x=date))+geom_histogram()
ggplot(test.gather,aes(x=date))+geom_histogram()
ggplot(test.gather,aes(x=date,stat="count"))+geom_histogram()
ggplot(test.gather,aes(stat="count"))+geom_histogram()
ggplot(test.gather,aes(stat="count",x=date))+geom_histogram()
ggplot(test.gather,aes(x=date))+geom_histogram(stat="count")
ggplot(test.gather,aes(y=date))+geom_histogram(stat="count")
ggplot(test.gather,aes(x=Supermarket))+geom_histogram(stat="count")
ggplot(test.gather,aes(x=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,220,21,22)))+geom_histogram(stat="count")
ggplot(test.gather,aes(x=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,220,21,22,23,24,25,26,27,28)))+geom_histogram(stat="count")
ggplot(test.gather,aes(x=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,220,21,22,23,24,25,26,27,28)))+geom_histogram()
ggplot(test.gather,aes(x=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28)))+geom_histogram()
ggplot(test.gather,aes(x=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28)))+geom_histogram(stat="count")
ggplot(test.gather,aes(x=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28)))+geom_histogram(stat=demand)
ggplot(test.gather,aes(x=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28)))+geom_histogram(stat=test.gather$demand)
ggplot(test.gather,aes(x=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28)))+geom_histogram(stat='demand')
demand = gather(demand,key=date,value=demand,ends_with("19"))
demand$day <- weekdays(as.Date(demand$date))
demand
demand$Type <- sub("(\\w+).*", "\\1", demand$Supermarket)
View(demand)
ggplot(demand,aex(x=day))+geom_histogram()+facet_grid(~Type)+theme_bw()
ggplot(demand,aes(x=day))+geom_histogram()+facet_grid(~Type)+theme_bw()
ggplot(demand,aes(x=day))+geom_histogram(stat="count")+facet_grid(~Type)+theme_bw()
ggplot(demand,aes(x=day,y=demand))+geom_histogram(stat="count")+facet_grid(~Type)+theme_bw()
ggplot(demand,aes(x=demand))+geom_histogram(stat="count")+facet_grid(~Type)
ggplot(demand,aes(x=day))+geom_histogram(stat="count")+facet_grid(~Type)+theme_bw()
ggplot(demand,aes(x=demand))+geom_histogram(stat="count")+facet_grid(~Type)+theme_bw()
ggplot(demand,aes(x=demand))+geom_histogram(stat="count")+facet_grid(~Day)+theme_bw()
ggplot(demand,aes(x=demand))+geom_histogram(stat="count")+facet_grid(~day)+theme_bw()
demand$test <- weekdays(demand$date)
demand$date = as.Date(demand$date)
demand = read_csv("C:/Users/jloo1/Dropbox/2nd Year/2nd Sem/263/OR/Project/demandData.csv", col_names=TRUE)
demand = gather(demand,key=date,value=demand,ends_with("19"))
demand$test = as.Date(demand$date,format="%d/%m/%Y")
demand$day <- weekdays(demand$test)
demand$Type <- sub("(\\w+).*", "\\1", demand$Supermarket)
ggplot(demand,aes(x=demand))+geom_histogram(stat="count")+facet_grid(~Type)+theme_bw()
ggplot(demand,aes(x=demand))+geom_histogram(stat="count")+facet_grid(~day)+theme_bw()
pbinom(44,50,0.8)
1-pbinom(44,50,0.8)
library(tidyverse)
library(ggplot2)
demand = read_csv("C:/Users/jloo1/Dropbox/2nd Year/2nd Sem/263/OR/Project/demandData.csv", col_names=TRUE)
locations = read_csv("C:/Users/jloo1/Dropbox/2nd Year/2nd Sem/263/OR/Project/FoodstuffLocations.csv", col_names=TRUE)
demand = gather(demand,key=date,value=demand,ends_with("19"))
demand$test = as.Date(demand$date,format="%d/%m/%Y")
demand$day <- weekdays(demand$test)
demand$Type <- sub("(\\w+).*", "\\1", demand$Supermarket)
ggplot(demand,aes(x=demand))+geom_histogram(stat="count")+facet_grid(~Type)+theme_bw()
ggplot(demand,aes(x=demand))+geom_histogram(stat="count")+facet_grid(~day)+theme_bw()
library(tidyverse)
library(ggplot2)
demand = read_csv("C:/Users/jloo1/Dropbox/2nd Year/2nd Sem/263/OR/Project/demandData.csv", col_names=TRUE)
locations = read_csv("C:/Users/jloo1/Dropbox/2nd Year/2nd Sem/263/OR/Project/FoodstuffLocations.csv", col_names=TRUE)
demand = gather(demand,key=date,value=demand,ends_with("19"))
demand$test = as.Date(demand$date,format="%d/%m/%Y")
demand$day <- weekdays(demand$test)
demand$Type <- sub("(\\w+).*", "\\1", demand$Supermarket)
ggplot(demand,aes(x=demand))+geom_histogram(stat="count")+facet_grid(Type~day)+theme_bw()
ggplot(demand,aes(x=demand))+geom_histogram(stat="count")+facet_grid(~Type)+theme_bw()
ggplot(demand,aes(x=demand))+geom_histogram(stat="count")+facet_grid(~day)+theme_bw()
ggplot(demand,aes(x=demand))+geom_histogram(stat="count")+facet_grid(Type~day)+theme_bw()
x <- c(0.7,1.3,1.7,1.0)
y <- c(5.0,8.0,13.0,8.0)
z <- c(0.0,1.0,0.0,0.0)
glm(cbind(z,3))
cbind(z,3)
glm(cbind(z,3) ~ 0+ x+y, family=binomial(logit))
glm(cbind(z,3)~0+x+y,family=binomial(logit))
myglm <- glm(cbind(z,3)~0+x+y,family=binomial(logit))
View(myglm)
summary(myglm)
x <- c(0.7,1.3,1.7,1.0)
y <- c(5.0,8.0,13.0,8.0)
z <- c(0.0,2.0,0.0,1.0)
glm(cbind(z,3))
cbind
cbind(z,3)
myglm <- glm(cbind(z,3)~0+x+y,family=binomial(logit))
summary(myglm)
glm(cbind(z,3)~0+x+y,family=binomial(logit))
z <- c(0.0,1.0,0.0,0.0)
myglm <- glm(cbind(z,3)~0+x+y,family=binomial(logit))
myglm
z <- c(0.0,2.0,0.0,1.0)
myglm <- glm(cbind(z,3)~0+x+y,family=binomial(logit))
glm(cbind(z,3)~0+x+y,family=binomial(logit))
vcom(myglm)
plot(cars)
x <- c(0.7,1.3,1.7,1.0)
y <- c(5.0,8.0,13.0,8.0)
z <- c(0.0,2.0,0.0,1.0)
fit <- glm(cbind(z,3)~0+x+y,family=bionmial(logit))
fit <- glm(cbind(z,3)~0+x+y,family=binomial(logit))
summary(fit)
install.packages("mlbench")
install.packages("klar")
yews
install.packages("klaR")
library("klaR")
library(tidyverse)
library(mlbench)
data("BreastCancer", package = "mlbench")
View(BreastCancer)
BreastCancer$Id = NULL
# Inspect the data
?BreastCancer
as_tibble(BreastCancer)
#Exploratory analysis
pairs(BreastCancer,col=BreastCancer$Class)
# Split the data into training and test sets, with 400 observations in the training set.
set.seed(100)
training.samples = sample(1:nrow(BreastCancer),400)#Complete this line
train.data = BreastCancer[training.samples, ]
View(train.data)
test.data = BreastCancer[-training.samples, ]
# Fit the model Naive Bayes Model
model = NaiveBayes(Class~.,data=train.data)#Complete this line
# Make predictions for Test Data
predictions = predict(model)#Complete this line
warnings()
# Make predictions for Test Data
predictions = predict(model, test.data)#Complete this line
# Construct a confusion matrix
table(actual=test.data$Class,prediction=predictions$class)
df=as_tibble(predictions$posterior)
df$actual=test.data$Class
df$correct=test.data$Class==predictions$class
ggplot(df)+geom_jitter(aes(x=correct,y=malignant,color=correct))
df$color=ifelse(df$correct==TRUE,df$actual,"3")
pairs(test.data,col=df$color)
rm(list=Is(all.names = TRUE))
rm(list=is(all.names = TRUE))
rm(list=ls(all.names = TRUE))
library("tidyverse")
library(tidyverse)
library(klaR)
library(mlbench)
#Loading in data, setting the seed and generating training and test sets
data("BreastCancer", package="mlbench")
BreastCancer$Id = NULL
set.seed(100)
training.samples = sample(1:nrow(BreastCancer),400)
train.data = BreastCancer[training.samples, ]
test.data = BreastCancer[-training.samples, ]
train.data = sample()
#Loading in data, setting the seed and generating training and test sets
data("BreastCancer", package="mlbench")
BreastCancer$Id = NULL
set.seed(100)
training.samples = sample(1:nrow(BreastCancer),400)
train.data = BreastCancer[training.samples, ]
test.data = BreastCancer[-training.samples, ]
#Creating pairs plots for both training and test data sets
pairs(train.data,col=BreastCancer$Class)
pairs(test.data,col=BreastCancer$Class)
?rpart
??rpart
rpart()
install.packages("rpart")
library(rpart)
rpart?
?rpart
tree.3 = rpart(Class~.,data=train.data,method="class",control=control.3)
control.3 = rpart.control(minsplit=1,maxdepth=3,cp=0)
control.6 = rpart.control(minsplit=1,maxdepth=6,cp=0)
control.9 = rpart.control(minsplit=1,maxdepth=9,cp=0)
tree.3 = rpart(Class~.,data=train.data,method="class",control=control.3)
View(tree.3)
?fancyRpartplot
?fancyRpartPlot
fancyRpartPlot()
library(rpart)
fancyRpartPlot
fancyRpartPlot()
install.packages(rattle)
install.packages("rattle")
library(rattle)
library(rattle)
?fancyRpartPlot
#Creating control parameters
control.3 = rpart.control(minsplit=1,maxdepth=3,cp=0)
control.6 = rpart.control(minsplit=1,maxdepth=6,cp=0)
control.9 = rpart.control(minsplit=1,maxdepth=9,cp=0)
#Generating classification trees
tree.3 = rpart(Class~.,data=train.data,method="class",control=control.3)
tree.6 = rpart(Class~.,data=train.data,method="class",control=control.6)
tree.9 = rpart(Class~.,data=train.data,method="class",control=control.9)
#Visualising tree with maxdepth = 3
fancyRpartPlot(tree.3)
#Creating control parameters
control.3 = rpart.control(minsplit=1,maxdepth=3,cp=0)
control.6 = rpart.control(minsplit=1,maxdepth=6,cp=0)
control.9 = rpart.control(minsplit=1,maxdepth=9,cp=0)
#Generating classification trees
tree.3 = rpart(Class~.,data=train.data,method="class",control=control.3)
tree.6 = rpart(Class~.,data=train.data,method="class",control=control.6)
tree.9 = rpart(Class~.,data=train.data,method="class",control=control.9)
#Visualising tree with maxdepth = 3
fancyRpartPlot(tree.3)
#Calculating in-sample confusion matrices for each tree
tree.3.in.predict = predict(tree.3,train.data,type="class")
table(Actual = train.data$Class, Prediction = tree.3.in.predict)
tree.6.in.predict = predict(tree.6,train.data,type="class")
table(Actual = train.data$Class, Prediction = tree.6.in.predict)
tree.9.in.predict = predict(tree.9,train.data,type="class")
table(Actual = train.data$Class, Prediction = tree.9.in.predict)
#Creating control parameters
control.3 = rpart.control(minsplit=1,maxdepth=3,cp=0)
control.6 = rpart.control(minsplit=1,maxdepth=6,cp=0)
control.9 = rpart.control(minsplit=1,maxdepth=9,cp=0)
#Generating classification trees
tree.3 = rpart(Class~.,data=train.data,method="class",control=control.3)
tree.6 = rpart(Class~.,data=train.data,method="class",control=control.6)
tree.9 = rpart(Class~.,data=train.data,method="class",control=control.9)
#Visualising tree with maxdepth = 3
fancyRpartPlot(tree.3)
#Calculating in-sample confusion matrices for each tree
tree.3.in.predict = predict(tree.3,train.data,type="class")
table(Actual = train.data$Class, Prediction = tree.3.in.predict)
tree.6.in.predict = predict(tree.6,train.data,type="class")
table(Actual = train.data$Class, Prediction = tree.6.in.predict)
tree.9.in.predict = predict(tree.9,train.data,type="class")
table(Actual = train.data$Class, Prediction = tree.9.in.predict)
#Calculating out-of-sample confusion matrices
tree.3.out.predict = predict(tree.3,test.data,type="class")
table(Actual = train.data$Class, Prediction = tree.3.out.predict)
#Creating control parameters
control.3 = rpart.control(minsplit=1,maxdepth=3,cp=0)
control.6 = rpart.control(minsplit=1,maxdepth=6,cp=0)
control.9 = rpart.control(minsplit=1,maxdepth=9,cp=0)
#Generating classification trees
tree.3 = rpart(Class~.,data=train.data,method="class",control=control.3)
tree.6 = rpart(Class~.,data=train.data,method="class",control=control.6)
tree.9 = rpart(Class~.,data=train.data,method="class",control=control.9)
#Visualising tree with maxdepth = 3
fancyRpartPlot(tree.3)
#Calculating in-sample confusion matrices for each tree
tree.3.in.predict = predict(tree.3,train.data,type="class")
table(Actual = train.data$Class, Prediction = tree.3.in.predict)
tree.6.in.predict = predict(tree.6,train.data,type="class")
table(Actual = train.data$Class, Prediction = tree.6.in.predict)
tree.9.in.predict = predict(tree.9,train.data,type="class")
table(Actual = train.data$Class, Prediction = tree.9.in.predict)
#Calculating out-of-sample confusion matrices
tree.3.out.predict = predict(tree.3,test.data,type="class")
table(Actual = test.data$Class, Prediction = tree.3.out.predict)
tree.6.out.predict = predict(tree.6,test.data,type="class")
table(Actual = test.data$Class, Prediction = tree.6.out.predict)
tree.9.out.predict = predict(tree.9,test.data,type="class")
table(Actual = test.data$Class, Prediction = tree.9.out.predict)
#
#Creating control parameters
control.3 = rpart.control(minsplit=1,maxdepth=3,cp=0)
control.6 = rpart.control(minsplit=1,maxdepth=6,cp=0)
control.9 = rpart.control(minsplit=1,maxdepth=9,cp=0)
#Generating classification trees
tree.3 = rpart(Class~.,data=train.data,method="class",control=control.3)
tree.6 = rpart(Class~.,data=train.data,method="class",control=control.6)
tree.9 = rpart(Class~.,data=train.data,method="class",control=control.9)
#Visualising tree with maxdepth = 3
fancyRpartPlot(tree.3)
#Calculating in-sample confusion matrices for each tree
tree.3.in.predict = predict(tree.3,train.data,type="class")
table(Actual = train.data$Class, Prediction = tree.3.in.predict)
tree.6.in.predict = predict(tree.6,train.data,type="class")
table(Actual = train.data$Class, Prediction = tree.6.in.predict)
tree.9.in.predict = predict(tree.9,train.data,type="class")
table(Actual = train.data$Class, Prediction = tree.9.in.predict)
#Calculating out-of-sample confusion matrices
tree.3.out.predict = predict(tree.3,test.data,type="class")
table(Actual = test.data$Class, Prediction = tree.3.out.predict)
tree.6.out.predict = predict(tree.6,test.data,type="class")
table(Actual = test.data$Class, Prediction = tree.6.out.predict)
tree.9.out.predict = predict(tree.9,test.data,type="class")
table(Actual = test.data$Class, Prediction = tree.9.out.predict)
#
tree.3.1 = rpart(Class~.,data=train.data,method="class",control=control.3,parms=list(loss=matrix(c(0,90,10,0), nrow=2)))
tree.3.1 = rpart(Class~.,data=train.data,method="class",control=control.3,parms=list(loss=matrix(c(0,90,10,0), nrow=2)))
tree.3.2 = rpart(Class~.,data=train.data,method="class",control=control.3,parms=list(loss=matrix(c(0,75,25,0), nrow=2)))
tree.3.3 = rpart(Class~.,data=train.data,method="class",control=control.3,parms=list(loss=matrix(c(0,25,75,0), nrow=2)))
tree.3.4 = rpart(Class~.,data=train.data,method="class",control=control.3,parms=list(loss=matrix(c(0,10,90,0), nrow=2)))
table(Actual = test.data$Class, Prediction = tree.3.1.out)
library(tidyverse)
library(klaR)
library(mlbench)
library(rpart)
library(rattle)
library(ggplot2)
library(randomForest)
#Reading in dataset
letters = read_csv("C:/Users/jloo1/Dropbox/2nd Year/2nd Sem/255/Assignment 4/letters.csv",col_names=TRUE)
#Reading in dataset
letters = read_csv("C:/Users/jloo1/Dropbox/2nd Year/2nd Sem/255/Assignment 4/letters.csv",col_names=TRUE)
#Setting seed and creating a random data set
set.seed(50)
l.samples.ind = sample(1:nrow(letters),18000)
#Filtering data into training and test sets
letters.train = letters[l.samples.ind, ]
letters.test = letters[-l.samples.ind, ]
letters.train$lettr <- as.factor(letters.train$lettr)
letters.test$lettr <- as.factor(letters.test$lettr)
set.seed(100)
rf.10 = randomForest(lettr~., letters.train, ntree=10)
set.seed(100)
rf.100 = randomForest(lettr~., letters.train, ntree=100)
set.seed(100)
rf.1000 = randomForest(lettr~., letters.train, ntree=1000)
rf.10
rf.100
rf.1000
predict.rf = predict(rf.1000,letters.test, type ="response")
letter.conf <- table(Letter=letters.test$lettr,Prediction=predict.rf)
print(letter.conf)
cat("Accuracy = ", sum(diag(letter.conf))/sum(letter.conf)*100,"%")
letter.nb = NaiveBayes(lettr~.,data=letters.train)
View(letter.nb)
nb.in = predict(letter.nb,letters.train)$class
nb.out = predict(letter.nb,letters.test)$class
nb.in = predict(letter.nb,letters.train)
nb.out = predict(letter.nb,letters.test)
View(nb.in)
nb.in = predict(letter.nb,letters.train)$class
nb.out = predict(letter.nb,letters.test)$class
x = c(0.7,1.3,1.7,1.0)
y = c(5.0,8.0,13.0,8.0)
z = c(0.0,2.0,0.0,1.0)
glm(cbind(z,3-z)~0+x+y,family=binomial(logit))
cat("In-sample Accuracy = ", sum(diag(nb.in))/sum(nb.in)*100,"%")
cat("Out-of-sample Accuracy = ", sum(diag(nb.out))/sum(nb.out)*100,"%")
diag(nb.in)
sum(diag(nb.in))
diag(nb.out)
sum(diag(nb.out))
cat("In-sample Accuracy = ", sum(diag(nb.in))/sum(nb.in)*100,"%")
nb.in = predict(letter.nb,letters.train)$class
nb.in = predict(letter.nb,letters.train)$class
nb.out = predict(letter.nb,letters.test)$class
cat("In-sample Accuracy = ", sum(diag(nb.in))/sum(nb.in)*100,"%")
sum(nb.in)
nb.in
diag(nb.in)
library(iris)
iris_tibble = as.tibble(iris)
iris_tibble = as_tibble(iris)
iris.nb = NaiveBayes(Species~.,data=iris)
View(iris.nb)
predictions = predict(iris.nb,iris)$class
predictions
diag(predictions)
view(predictions)
data("BreastCancer", package = "mlbench")
BreastCancer$Id = NULL
# Split the data into training and test sets, with 400 observations in the training set.
set.seed(100)
training.samples = sample(1:nrow(BreastCancer),400)#Complete this line
train.data = BreastCancer[training.samples, ]
test.data = BreastCancer[-training.samples, ]
# Fit the model Naive Bayes Model
model = NaiveBayes(Class~.,data=train.data)#Complete this line
# Make predictions for Test Data
predictions = predict(model, test.data)#Complete this line
# Construct a confusion matrix
table(actual=test.data$Class,prediction=predictions$class)
predictions
View(predictions)
view(predictions$class)
diag(predictions$class)
sum(predictions$class)
nb.in <- table(Letters = letters.train,Prediction=predict(letter.nb,letters.train)$class)
nb.in <- table(Letters = letters.train$lettr,Prediction=predict(letter.nb,letters.train)$class)
nb.out <- table(Letters = letters.test$lettr,Prediction=predict(letter.nb,letters.test)$class)
cat("In-sample Accuracy = ", sum(diag(nb.in))/sum(nb.in)*100,"%")
cat("Out-of-sample Accuracy = ", sum(diag(nb.out))/sum(nb.out)*100,"%")
nb.in <- table(Letters = letters.train$lettr,Prediction=predict(letter.nb,letters.train)$class)
nb.out <- table(Letters = letters.test$lettr,Prediction=predict(letter.nb,letters.test)$class)
cat("In-sample Accuracy = ", sum(diag(nb.in))/sum(nb.in)*100,"%")
cat("Out-of-sample Accuracy = ", sum(diag(nb.out))/sum(nb.out)*100,"%")
nb.in <- table(Letters = letters.train$lettr,Prediction=predict(letter.nb,letters.train)$class)
nb.out <- table(Letters = letters.test$lettr,Prediction=predict(letter.nb,letters.test)$class)
cat("In-sample Accuracy = ", sum(diag(nb.in))/sum(nb.in)*100,"%\n")
cat("Out-of-sample Accuracy = ", sum(diag(nb.out))/sum(nb.out)*100,"%")
print(nb.out)
source('C:/Users/jloo1/Dropbox/2nd Year/2nd Sem/210/ass3.R', echo=TRUE)
bino = glm(cbind(z,3-z)~0+x+y,family=binomial(logit))
bino
View(bino)
summary(bino)
bino$coefficients
std.error = summary(bino)$coefficients[,2]
var.alpha,var.beta = std.error*std.error
var.alpha = std.error[1]*std.error[1]
var.beta = std.error[2]*std.error[2]
source('C:/Users/jloo1/Dropbox/2nd Year/2nd Sem/210/ass3.R', echo=TRUE)
summary(bino)
source('C:/Users/jloo1/Dropbox/2nd Year/2nd Sem/263/OR/Project/analysis.R', echo=TRUE)
View(demand.four)
demand.four
demand$day <- as.factor(weekdays(demand$test)
demand$day <- as.factor(weekdays(demand$test))
demand$Type <- sub("(\\w+).*", "\\1", demand$Supermarket)
demand.four = filter(demand,Type=="Four")
demand.fresh = filter(demand,Type=="Fresh")
demand.new = filter(demand,Type=="New")
demand.pak = filter(demand,Type=="Pak")
ggplot(demand.four,aes(x=demand))+geom_histogram(stat="count")+facet_grid(Supermarket~day)+theme_bw()
demand$weekday <- demand$day %in% c("Monday","Tuesday","Wednesday","Thurdsay","Friday")
View(demand)
demand$weekday <- demand$day %in% c("Monday","Tuesday","Wednesday","Thursday","Friday")
demand$Type <- sub("(\\w+).*", "\\1", demand$Supermarket)
demand.four = filter(demand,Type=="Four")
demand.fresh = filter(demand,Type=="Fresh")
demand.new = filter(demand,Type=="New")
demand.pak = filter(demand,Type=="Pak")
demand.four.weekday = filter(demand.four,Weekday==True)
demand.four.weekday = filter(demand.four,weekday==True)
demand.four.weekday = filter(demand.four,weekday=="True")
demand.four.weekday = filter(demand.four,weekday==TRUE)
View(demand.four.weekday)
source('C:/Users/jloo1/Dropbox/2nd Year/2nd Sem/263/OR/Project/analysis.R', echo=TRUE)
source('C:/Users/jloo1/Dropbox/2nd Year/2nd Sem/263/OR/Project/analysis.R', echo=TRUE)
View(demand.new.weekday)
ggplot(demand.four,aes(x=demand))+geom_histogram(stat="count")+facet_grid(Supermarket~day)+theme_bw()
View(demand.four)
ggplot(demand.four.weekday,aes(x=demand))+geom_histogram(stat="count")+facet_grid(Supermarket~day)+theme_bw()
ggplot(demand.fresh.weekday,aes(x=demand))+geom_histogram(stat="count")+facet_grid(Supermarket~day)+theme_bw()
ggplot(demand.four.weekday,aes(x=demand))+geom_histogram(stat="count")+facet_grid(Supermarket~day)+theme_bw()
ggplot(demand.fresh.weekday,aes(x=demand))+geom_histogram(stat="count")+facet_grid(Supermarket~day)+theme_bw()
ggplot(demand.new.weekday,aes(x=demand))+geom_histogram(stat="count")+facet_grid(Supermarket~day)+theme_bw()
ggplot(demand.pak.weekday,aes(x=demand))+geom_histogram(stat="count")+facet_grid(Supermarket~day)+theme_bw()
View(demand.four.weekday)
ggplot(demand.four.weekday,aes(x=demand))+geom_histogram(stat="count")+facet_grid(Supermarket~day)+theme_bw()
ggplot(demand.fresh.weekday,aes(x=demand))+geom_histogram(stat="count")+facet_grid(Supermarket~day)+theme_bw()
ggplot(demand.new.weekday,aes(x=demand))+geom_histogram(stat="count")+facet_grid(Supermarket~day)+theme_bw()
View(demand.fresh.weekday)
View(demand.fresh)
demand.four = filter(demand,Type=="Four")
demand.four.weekday = filter(demand.four,weekday==TRUE)
demand.four.weekend = filter(demand.four,weekday==FALSE)
demand.four = filter(demand,Type=="Four")
demand.four.weekday = filter(demand.four,weekday==TRUE)
demand.four.weekend = filter(demand.four,weekday==FALSE)
demand.fresh = filter(demand,Type=="Fresh")
demand.fresh.weekday = filter(demand.fresh,weekday==TRUE)
demand.fresh.weekend = filter(demand.fresh,weekday==FALSE)
demand.new = filter(demand,Type=="New")
demand.new.weekday = filter(demand.new,weekday==TRUE)
demand.new.weekend = filter(demand.new,weekday==FALSE)
demand.pak = filter(demand,Type=="Pak")
demand.pak.weekday = filter(demand.pak,weekday==TRUE)
demand.pak.weekend = filter(demand.pak,weekday==FALSE)
ggplot(demand.four.weekday,aes(x=demand))+geom_histogram(stat="count")+facet_grid(Supermarket~day)+theme_bw()
ggplot(demand.fresh.weekday,aes(x=demand))+geom_histogram(stat="count")+facet_grid(Supermarket~day)+theme_bw()
ggplot(demand.new.weekday,aes(x=demand))+geom_histogram(stat="count")+facet_grid(Supermarket~day)+theme_bw()
ggplot(demand.pak.weekday,aes(x=demand))+geom_histogram(stat="count")+facet_grid(Supermarket~day)+theme_bw()
ggplot(demand.new.weekday,aes(x=demand))+geom_histogram(stat="count")+facet_grid(Supermarket~day)+theme_bw()
View(demand.pak.weekday)
View(demand.new.weekday)
ggplot(demand.new.weekday,aes(x=demand))+geom_histogram(stat="count")+facet_grid(Supermarket~day)+theme_bw()
ggplot(demand.pak.weekday,aes(x=demand))+geom_histogram(stat="count")+facet_grid(Supermarket~day)+theme_bw()
ggplot(demand.four.weekend,aes(x=demand))+geom_histogram(stat="count")+facet_grid(Supermarket~day)+theme_bw()
ggplot(demand.fresh.weekend,aes(x=demand))+geom_histogram(stat="count")+facet_grid(Supermarket~day)+theme_bw()
ggplot(demand.new.weekend,aes(x=demand))+geom_histogram(stat="count")+facet_grid(Supermarket~day)+theme_bw()
ggplot(demand.pak.weekend,aes(x=demand))+geom_histogram(stat="count")+facet_grid(Supermarket~day)+theme_bw()
#Setting current working directory to source file location
rstudioapi::getActiveDocumentContext
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Loading required libraries
library(tidyverse)
library(ggplot2)
d2 = read_csv("weekdaydemand.csv", col_names=TRUE)
View(d2)
sum(d2$demand)
